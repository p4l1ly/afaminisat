How to improve performance further
==================================

- DONE, SUSPICIOUSLY_GOOD_IMPACT VarOrder: tolerance grows slower than liveness step
- Less memory jumping:
    - DONE LogLists are used in the trie, which can cause memory jumping.
      - DONE we can increase granularity of LogLists. AND MAYBE THIS (for snapshots)
      - WONT_DO we can put the first LogList array in directly into the structure.
      - DONE we can solidify the structure into one big array. AND MAYBE THIS (impossible for AFA,
        are clauses solidified?)
      - DONE we can use arrays for VerHeads, vectors for HorHeads and detect reallocation.
        - current solution is not compatible for antichains (dynamic adding of verheads), it would
          need the following modification: verhead->above points to the leftmost horhead and
          therefore, in iteration, if is_hor, we should do double derefrence verhead->above->above.
        - or maybe instead, reallocation could iterate through the horline below and adapt each
          "above"

- DONE, GOOD_IMPACT Sort literals in input clauses from the most frequent (globally) to the least frequent one

- DONE Switch VarOrder
- DONE Try to merge analyze and analyze2
- DONE (NEW_ANALYZE has  4 times worse result at the first benchmark, randomness?). Switch analyze

- DONE, they're faster Try to run original MiniSAT (v1.12 and v1.14)
- Try to run at least one external high end SAT solver


Then
====

- Reapply AFA stuff. Turn features on/off
- second VarOrder for outputs
- VarOrder: prefer watched variables?

- Adapt one incremental SAT solver for antichain.

- Try to run at least one external incremental SAT solver
